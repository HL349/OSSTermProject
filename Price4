import os
import numpy as np
import cv2
import easyocr

# 이미지 파일이 있는 디렉토리 경로 설정
image_dir = 'C:/Users/mousy/TermProjectTest/Price'

# OCR 리더 초기화
reader = easyocr.Reader(['ko', 'en'])

# 이미지 파일 전처리 및 OCR 수행 함수
def process_image(image_path, output_prefix):
    src = cv2.imread(image_path, 1)

    # grayscale
    gray = cv2.cvtColor(src, cv2.COLOR_BGR2GRAY)
    gray = cv2.GaussianBlur(gray, (3, 3), 0)

    # canny
    canned = cv2.Canny(gray, 150, 300)

    # dilate to close holes in lines
    kernel = np.ones((10,1),np.uint8) # 가로 1 세로 10
    mask = cv2.dilate(canned, kernel, iterations=20)

    # contours 찾기
    contours, _ = cv2.findContours(mask, cv2.RETR_TREE, cv2.CHAIN_APPROX_SIMPLE)

    # 가장 큰 contours 찾기
    biggest_cntr = None
    biggest_area = 0
    for contour in contours:
        area = cv2.contourArea(contour)
        if area > biggest_area:
            biggest_area = area
            biggest_cntr = contour

    if biggest_cntr is None:
        print(f"No contours found for {image_path}")
        return None

    # 외곽 box
    rect = cv2.minAreaRect(biggest_cntr)
    box = cv2.boxPoints(rect)
    box = np.array(box, dtype=np.intp)

    # 외곽 box 그리기
    src_box = src.copy()
    cv2.drawContours(src_box, [box], 0, (0, 255, 0), 3)

    # angle 계산
    angle = rect[-1]
    if angle > 45:
        angle = -(90 - angle)

    # 기울기 조정
    rotated = src.copy()
    (h, w) = rotated.shape[:2]
    center = (w // 2, h // 2)
    M = cv2.getRotationMatrix2D(center, angle, 1.0)
    rotated = cv2.warpAffine(rotated, M, (w, h), flags=cv2.INTER_CUBIC, borderMode=cv2.BORDER_REPLICATE)

    # 회전된 박스 좌표 찾기
    ones = np.ones(shape=(len(box), 1))
    points_ones = np.hstack([box, ones])
    transformed_box = M.dot(points_ones.T).T

    y = [transformed_box[0][1], transformed_box[1][1], transformed_box[2][1], transformed_box[3][1]]
    x = [transformed_box[0][0], transformed_box[1][0], transformed_box[2][0], transformed_box[3][0]]

    y1, y2 = int(min(y)), int(max(y))
    x1, x2 = int(min(x)), int(max(x))

    # crop
    crop = rotated[y1:y2, x1:x2]

    if crop.size == 0:
        print(f"Crop is empty for {image_path}")
        return None

    # 흑백처리
    gray2 = cv2.cvtColor(crop, cv2.COLOR_BGR2GRAY)

    # 파일 저장
    cv2.imwrite(f"{output_prefix}_mask.jpg", mask)
    cv2.imwrite(f"{output_prefix}_box.jpg", src_box)
    cv2.imwrite(f"{output_prefix}_canny.jpg", canned)
    cv2.imwrite(f"{output_prefix}_rotated.jpg", rotated)
    cv2.imwrite(f"{output_prefix}_cropped.jpg", crop)
    cv2.imwrite(f"{output_prefix}_gray.jpg", gray2)

    return crop

# 파일 이름에서 숫자를 추출하는 함수
def extract_number(filename):
    number = ''.join(filter(str.isdigit, filename))
    return int(number) if number else float('inf')

# 이미지 파일 정렬
image_files = sorted([f for f in os.listdir(image_dir) if f.endswith(('.png', '.jpg', '.jpeg'))], key=extract_number)

# 이미지 디렉토리 내 모든 이미지 파일 처리 및 OCR 수행
for i, filename in enumerate(image_files, start=1):
    image_path = os.path.join(image_dir, filename)
    output_prefix = os.path.join(image_dir, f"Price{i}")

    # 이미지 전처리 및 OCR 수행
    cropped_image = process_image(image_path, output_prefix)

    if cropped_image is not None:
        # OCR 수행
        result = reader.readtext(cropped_image)

        # OCR 결과 저장
        with open(f"{output_prefix}.txt", 'w', encoding='utf-8') as file:
            for (bbox, text, prob) in result:
                file.write(f"{text}\t{prob}\n")

        print(f"Processed {filename} and saved results to {output_prefix}.txt")
    else:
        print(f"Skipped {filename} due to empty crop.")

print("All images processed.")
